{"version":3,"file":"static/js/927.3df974be.chunk.js","mappings":"2RAEaA,EAAOC,EAAAA,GAAAA,GAAH,uHAQJC,EAAWD,EAAAA,GAAAA,GAAH,yLASRE,EAAMF,EAAAA,GAAAA,IAAH,4DAIHG,EAAOH,EAAAA,GAAAA,IAAH,yCAIJI,EAAOJ,EAAAA,GAAAA,KAAH,2C,SCWjB,EAlCa,WACX,IAAMK,ECDyB,WAC/B,OAAwBC,EAAAA,EAAAA,UAAS,MAAjC,eAAOD,EAAP,KAAaE,EAAb,KACA,GAA0BD,EAAAA,EAAAA,UAAS,IAAnC,eAAOE,EAAP,KAAcC,EAAd,KACQC,GAAaC,EAAAA,EAAAA,MAAbD,SAcR,OAZAE,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAS,mCAAG,8GAESC,EAAAA,EAAAA,IAAeJ,GAFxB,OAERK,EAFQ,OAGdR,EAAQQ,GAHM,gDAKdN,EAAS,KAAMO,SALD,yDAAH,qDAQfH,GACD,GAAE,CAACH,EAAUF,IAEPH,CACR,CDjBcY,GAEb,OACE,8BACGZ,GAAQA,EAAKA,KAAKa,OAAS,GAC1B,SAACnB,EAAD,UACGM,EAAKA,KAAKc,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,KAAMC,EAAb,EAAaA,aAAcC,EAA3B,EAA2BA,UAA3B,OACb,UAACtB,EAAD,WACIqB,IACA,SAACpB,EAAD,CACEsB,IAAG,yCAAoCF,GACvCG,IAAKJ,EACLK,MAAM,UAEJ,SAACxB,EAAD,CAAKsB,IAAKG,EAAKF,IAAKJ,EAAMK,MAAM,SACtC,UAACvB,EAAD,YACE,0BACE,SAACC,EAAD,oBADF,IACsBiB,MAEtB,0BACE,SAACjB,EAAD,yBADF,IAC2BmB,UAbhBH,EADF,OAqBjB,oFAIP,C,+LEnCKQ,EAAM,mCAGL,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,qGACkBC,EAAAA,EAAAA,GAAM,qBAAsB,CACjDC,OAAQ,CACNC,QAASJ,KAHR,cACCb,EADD,yBAMEA,EAASkB,MANX,kEASA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAA8BxB,GAA9B,wFACkBoB,EAAAA,EAAAA,GAAM,SAAD,OAAUpB,GAAY,CAChDqB,OAAQ,CACNC,QAASJ,KAHR,cACCb,EADD,yBAMEA,EAASkB,MANX,kEASA,SAAeE,EAAtB,+CAAO,OAAP,oBAAO,WAAkCC,GAAlC,wFACkBN,EAAAA,EAAAA,GAAM,eAAgB,CAC3CC,OAAQ,CACNC,QAASJ,EACTQ,MAAAA,KAJC,cACCrB,EADD,yBAOEA,EAASkB,MAPX,kEAUA,SAAenB,EAAtB,+CAAO,OAAP,oBAAO,WAA8BJ,GAA9B,wFACkBoB,EAAAA,EAAAA,GAAM,SAAD,OAAUpB,EAAV,YAA8B,CACxDqB,OAAQ,CACNC,QAASJ,KAHR,cACCb,EADD,yBAMEA,EAASkB,MANX,kEASA,SAAeI,EAAtB,+CAAO,OAAP,oBAAO,WAAiC3B,GAAjC,wFACkBoB,EAAAA,EAAAA,GAAM,SAAD,OAAUpB,EAAV,YAA8B,CACxDqB,OAAQ,CACNC,QAASJ,KAHR,cACCb,EADD,yBAMEA,EAASkB,MANX,kEAvCPH,EAAAA,EAAAA,SAAAA,QAAyB,+B","sources":["components/Cast/Cast.styled.js","components/Cast/Cast.jsx","hooks/useFetchMovieCast.jsx","services/moviesAPI.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const List = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  width: 80%;\n  gap: 15px;\n`;\n\nexport const ListItem = styled.li`\n  flex: display;\n  background-color: #212121;\n  padding-bottom: 5px;\n  border-radius: 5px;\n  border: 2px solid #2af598;\n  overflow: hidden;\n  width: 13%;\n`;\nexport const Img = styled.img`\n  display: block;\n  flex-grow: 1;\n`;\nexport const Info = styled.div`\n  padding: 5px;\n`;\n\nexport const Span = styled.span`\n  color: #08aeea;\n`;\n","import { useFetchMovieCast } from 'hooks/useFetchMovieCast';\nimport img from '../../images/nophoto.jpg';\nimport { List, ListItem, Img, Info, Span } from './Cast.styled';\n\nconst Cast = () => {\n  const cast = useFetchMovieCast();\n\n  return (\n    <>\n      {cast && cast.cast.length > 0 ? (\n        <List>\n          {cast.cast.map(({ id, name, profile_path, character }) => (\n            <ListItem key={id}>\n              {(profile_path && (\n                <Img\n                  src={`https://image.tmdb.org/t/p/w500${profile_path}`}\n                  alt={name}\n                  width=\"200\"\n                />\n              )) || <Img src={img} alt={name} width=\"200\" />}\n              <Info>\n                <p>\n                  <Span>Name:</Span> {name}\n                </p>\n                <p>\n                  <Span>Character:</Span> {character}\n                </p>\n              </Info>\n            </ListItem>\n          ))}\n        </List>\n      ) : (\n        <p>We don't have any Information about cast for this Movie</p>\n      )}\n    </>\n  );\n};\n\nexport default Cast;\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchMovieCast } from 'services/moviesAPI';\n\nexport const useFetchMovieCast = () => {\n  const [cast, setCast] = useState(null);\n  const [error, setError] = useState('');\n  const { movie_id } = useParams();\n\n  useEffect(() => {\n    const fetchCast = async () => {\n      try {\n        const response = await fetchMovieCast(movie_id);\n        setCast(response);\n      } catch (error) {\n        setError(error.message);\n      }\n    };\n    fetchCast();\n  }, [movie_id, error]);\n\n  return cast;\n};\n","import axios from 'axios';\nconst KEY = '894a5fcb5eb3af426933275e70f0cd83';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nexport async function fetchTrendingMovies() {\n  const response = await axios('trending/movie/day', {\n    params: {\n      api_key: KEY,\n    },\n  });\n  return response.data;\n}\n\nexport async function fetchMovieById(movie_id) {\n  const response = await axios(`movie/${movie_id}`, {\n    params: {\n      api_key: KEY,\n    },\n  });\n  return response.data;\n}\n\nexport async function fetchMovieBySearch(query) {\n  const response = await axios(`search/movie`, {\n    params: {\n      api_key: KEY,\n      query,\n    },\n  });\n  return response.data;\n}\n\nexport async function fetchMovieCast(movie_id) {\n  const response = await axios(`movie/${movie_id}/credits`, {\n    params: {\n      api_key: KEY,\n    },\n  });\n  return response.data;\n}\n\nexport async function fetchMovieReviews(movie_id) {\n  const response = await axios(`movie/${movie_id}/reviews`, {\n    params: {\n      api_key: KEY,\n    },\n  });\n  return response.data;\n}\n"],"names":["List","styled","ListItem","Img","Info","Span","cast","useState","setCast","error","setError","movie_id","useParams","useEffect","fetchCast","fetchMovieCast","response","message","useFetchMovieCast","length","map","id","name","profile_path","character","src","alt","width","img","KEY","fetchTrendingMovies","axios","params","api_key","data","fetchMovieById","fetchMovieBySearch","query","fetchMovieReviews"],"sourceRoot":""}